// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace visma {
namespace pdfutil {

class PDFUtil final {
 public:
  static constexpr char const* service_full_name() {
    return "visma.pdfutil.PDFUtil";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::visma::pdfutil::RenderResponse>> render(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::visma::pdfutil::RenderResponse>>(renderRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::visma::pdfutil::RenderResponse>> Asyncrender(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::visma::pdfutil::RenderResponse>>(AsyncrenderRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::visma::pdfutil::RenderResponse>> PrepareAsyncrender(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::visma::pdfutil::RenderResponse>>(PrepareAsyncrenderRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::visma::pdfutil::RenderResponse>* renderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::visma::pdfutil::RenderResponse>* AsyncrenderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::visma::pdfutil::RenderResponse>* PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::visma::pdfutil::RenderResponse>> render(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::visma::pdfutil::RenderResponse>>(renderRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>> Asyncrender(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>>(AsyncrenderRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>> PrepareAsyncrender(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>>(PrepareAsyncrenderRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::visma::pdfutil::RenderResponse>* renderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request) override;
    ::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>* AsyncrenderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>* PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_render_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status render(::grpc::ServerContext* context, const ::visma::pdfutil::RenderRequest* request, ::grpc::ServerWriter< ::visma::pdfutil::RenderResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_render() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* context, const ::visma::pdfutil::RenderRequest* request, ::grpc::ServerWriter< ::visma::pdfutil::RenderResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrender(::grpc::ServerContext* context, ::visma::pdfutil::RenderRequest* request, ::grpc::ServerAsyncWriter< ::visma::pdfutil::RenderResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_render<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_render() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status render(::grpc::ServerContext* context, const ::visma::pdfutil::RenderRequest* request, ::grpc::ServerWriter< ::visma::pdfutil::RenderResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_render : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_render() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::visma::pdfutil::RenderRequest, ::visma::pdfutil::RenderResponse>(std::bind(&WithSplitStreamingMethod_render<BaseClass>::Streamedrender, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_render() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status render(::grpc::ServerContext* context, const ::visma::pdfutil::RenderRequest* request, ::grpc::ServerWriter< ::visma::pdfutil::RenderResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedrender(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::visma::pdfutil::RenderRequest,::visma::pdfutil::RenderResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_render<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_render<Service > StreamedService;
};

}  // namespace pdfutil
}  // namespace visma


#endif  // GRPC_service_2eproto__INCLUDED
