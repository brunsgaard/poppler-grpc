// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace visma {
namespace pdfutil {

static const char* PDFUtil_method_names[] = {
  "/visma.pdfutil.PDFUtil/render",
};

std::unique_ptr< PDFUtil::Stub> PDFUtil::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< PDFUtil::Stub> stub(new PDFUtil::Stub(channel));
  return stub;
}

PDFUtil::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_render_(PDFUtil_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::visma::pdfutil::RenderResponse>* PDFUtil::Stub::renderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::visma::pdfutil::RenderResponse>::Create(channel_.get(), rpcmethod_render_, context, request);
}

::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>* PDFUtil::Stub::AsyncrenderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::visma::pdfutil::RenderResponse>::Create(channel_.get(), cq, rpcmethod_render_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::visma::pdfutil::RenderResponse>* PDFUtil::Stub::PrepareAsyncrenderRaw(::grpc::ClientContext* context, const ::visma::pdfutil::RenderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::visma::pdfutil::RenderResponse>::Create(channel_.get(), cq, rpcmethod_render_, context, request, false, nullptr);
}

PDFUtil::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PDFUtil_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PDFUtil::Service, ::visma::pdfutil::RenderRequest, ::visma::pdfutil::RenderResponse>(
          std::mem_fn(&PDFUtil::Service::render), this)));
}

PDFUtil::Service::~Service() {
}

::grpc::Status PDFUtil::Service::render(::grpc::ServerContext* context, const ::visma::pdfutil::RenderRequest* request, ::grpc::ServerWriter< ::visma::pdfutil::RenderResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace visma
}  // namespace pdfutil

