// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace visma {
namespace pdfutil {
class RenderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenderRequest>
      _instance;
} _RenderRequest_default_instance_;
class RenderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenderResponse>
      _instance;
} _RenderResponse_default_instance_;
}  // namespace pdfutil
}  // namespace visma
namespace protobuf_service_2eproto {
void InitDefaultsRenderRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::visma::pdfutil::_RenderRequest_default_instance_;
    new (ptr) ::visma::pdfutil::RenderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::visma::pdfutil::RenderRequest::InitAsDefaultInstance();
}

void InitDefaultsRenderRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRenderRequestImpl);
}

void InitDefaultsRenderResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::visma::pdfutil::_RenderResponse_default_instance_;
    new (ptr) ::visma::pdfutil::RenderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::visma::pdfutil::RenderResponse::InitAsDefaultInstance();
}

void InitDefaultsRenderResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRenderResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, pdfdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, targetpages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, dpi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, imagetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, imageformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderRequest, extracttext_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, pageindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, pagetext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, imagedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, imageheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, imagewidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, imagedpi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, imageformat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::visma::pdfutil::RenderResponse, imagesize_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::visma::pdfutil::RenderRequest)},
  { 11, -1, sizeof(::visma::pdfutil::RenderResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::visma::pdfutil::_RenderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::visma::pdfutil::_RenderResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rservice.proto\022\rvisma.pdfutil\"\265\001\n\rRende"
      "rRequest\022\017\n\007pdfData\030\001 \001(\014\022\023\n\013targetPages"
      "\030\002 \003(\005\022\013\n\003DPI\030\003 \001(\005\022+\n\timageType\030\004 \001(\0162\030"
      ".visma.pdfutil.ImageType\022/\n\013imageFormat\030"
      "\005 \001(\0162\032.visma.pdfutil.ImageFormat\022\023\n\013ext"
      "ractText\030\006 \001(\010\"\307\001\n\016RenderResponse\022\021\n\tpag"
      "eIndex\030\001 \001(\005\022\020\n\010pageText\030\002 \001(\t\022\021\n\timageD"
      "ata\030\003 \001(\014\022\023\n\013imageHeight\030\004 \001(\005\022\022\n\nimageW"
      "idth\030\005 \001(\005\022\020\n\010imageDPI\030\006 \001(\005\022/\n\013imageFor"
      "mat\030\007 \001(\0162\032.visma.pdfutil.ImageFormat\022\021\n"
      "\timageSize\030\010 \001(\005*4\n\tImageType\022\010\n\004ARGB\020\000\022"
      "\n\n\006BINARY\020\001\022\010\n\004GRAY\020\002\022\007\n\003RGB\020\003*\037\n\013ImageF"
      "ormat\022\007\n\003PNG\020\000\022\007\n\003PPM\020\0012T\n\007PDFUtil\022I\n\006re"
      "nder\022\034.visma.pdfutil.RenderRequest\032\035.vis"
      "ma.pdfutil.RenderResponse\"\0000\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_service_2eproto
namespace visma {
namespace pdfutil {
const ::google::protobuf::EnumDescriptor* ImageType_descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_enum_descriptors[0];
}
bool ImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_enum_descriptors[1];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RenderRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenderRequest::kPdfDataFieldNumber;
const int RenderRequest::kTargetPagesFieldNumber;
const int RenderRequest::kDPIFieldNumber;
const int RenderRequest::kImageTypeFieldNumber;
const int RenderRequest::kImageFormatFieldNumber;
const int RenderRequest::kExtractTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenderRequest::RenderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_service_2eproto::InitDefaultsRenderRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:visma.pdfutil.RenderRequest)
}
RenderRequest::RenderRequest(const RenderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      targetpages_(from.targetpages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pdfdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pdfdata().size() > 0) {
    pdfdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pdfdata_);
  }
  ::memcpy(&dpi_, &from.dpi_,
    static_cast<size_t>(reinterpret_cast<char*>(&extracttext_) -
    reinterpret_cast<char*>(&dpi_)) + sizeof(extracttext_));
  // @@protoc_insertion_point(copy_constructor:visma.pdfutil.RenderRequest)
}

void RenderRequest::SharedCtor() {
  pdfdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dpi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extracttext_) -
      reinterpret_cast<char*>(&dpi_)) + sizeof(extracttext_));
  _cached_size_ = 0;
}

RenderRequest::~RenderRequest() {
  // @@protoc_insertion_point(destructor:visma.pdfutil.RenderRequest)
  SharedDtor();
}

void RenderRequest::SharedDtor() {
  pdfdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenderRequest::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RenderRequest& RenderRequest::default_instance() {
  ::protobuf_service_2eproto::InitDefaultsRenderRequest();
  return *internal_default_instance();
}

RenderRequest* RenderRequest::New(::google::protobuf::Arena* arena) const {
  RenderRequest* n = new RenderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:visma.pdfutil.RenderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetpages_.Clear();
  pdfdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dpi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extracttext_) -
      reinterpret_cast<char*>(&dpi_)) + sizeof(extracttext_));
  _internal_metadata_.Clear();
}

bool RenderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:visma.pdfutil.RenderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pdfData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pdfdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 targetPages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_targetpages())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_targetpages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DPI = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dpi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .visma.pdfutil.ImageType imageType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_imagetype(static_cast< ::visma::pdfutil::ImageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .visma.pdfutil.ImageFormat imageFormat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_imageformat(static_cast< ::visma::pdfutil::ImageFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool extractText = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extracttext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:visma.pdfutil.RenderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:visma.pdfutil.RenderRequest)
  return false;
#undef DO_
}

void RenderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:visma.pdfutil.RenderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pdfData = 1;
  if (this->pdfdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pdfdata(), output);
  }

  // repeated int32 targetPages = 2;
  if (this->targetpages_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _targetpages_cached_byte_size_));
  }
  for (int i = 0, n = this->targetpages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->targetpages(i), output);
  }

  // int32 DPI = 3;
  if (this->dpi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dpi(), output);
  }

  // .visma.pdfutil.ImageType imageType = 4;
  if (this->imagetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->imagetype(), output);
  }

  // .visma.pdfutil.ImageFormat imageFormat = 5;
  if (this->imageformat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->imageformat(), output);
  }

  // bool extractText = 6;
  if (this->extracttext() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->extracttext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:visma.pdfutil.RenderRequest)
}

::google::protobuf::uint8* RenderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:visma.pdfutil.RenderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pdfData = 1;
  if (this->pdfdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pdfdata(), target);
  }

  // repeated int32 targetPages = 2;
  if (this->targetpages_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _targetpages_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->targetpages_, target);
  }

  // int32 DPI = 3;
  if (this->dpi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dpi(), target);
  }

  // .visma.pdfutil.ImageType imageType = 4;
  if (this->imagetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->imagetype(), target);
  }

  // .visma.pdfutil.ImageFormat imageFormat = 5;
  if (this->imageformat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->imageformat(), target);
  }

  // bool extractText = 6;
  if (this->extracttext() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->extracttext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:visma.pdfutil.RenderRequest)
  return target;
}

size_t RenderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:visma.pdfutil.RenderRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 targetPages = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->targetpages_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _targetpages_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes pdfData = 1;
  if (this->pdfdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pdfdata());
  }

  // int32 DPI = 3;
  if (this->dpi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dpi());
  }

  // .visma.pdfutil.ImageType imageType = 4;
  if (this->imagetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagetype());
  }

  // .visma.pdfutil.ImageFormat imageFormat = 5;
  if (this->imageformat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->imageformat());
  }

  // bool extractText = 6;
  if (this->extracttext() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:visma.pdfutil.RenderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RenderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:visma.pdfutil.RenderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:visma.pdfutil.RenderRequest)
    MergeFrom(*source);
  }
}

void RenderRequest::MergeFrom(const RenderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:visma.pdfutil.RenderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetpages_.MergeFrom(from.targetpages_);
  if (from.pdfdata().size() > 0) {

    pdfdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pdfdata_);
  }
  if (from.dpi() != 0) {
    set_dpi(from.dpi());
  }
  if (from.imagetype() != 0) {
    set_imagetype(from.imagetype());
  }
  if (from.imageformat() != 0) {
    set_imageformat(from.imageformat());
  }
  if (from.extracttext() != 0) {
    set_extracttext(from.extracttext());
  }
}

void RenderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:visma.pdfutil.RenderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderRequest::CopyFrom(const RenderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:visma.pdfutil.RenderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderRequest::IsInitialized() const {
  return true;
}

void RenderRequest::Swap(RenderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenderRequest::InternalSwap(RenderRequest* other) {
  using std::swap;
  targetpages_.InternalSwap(&other->targetpages_);
  pdfdata_.Swap(&other->pdfdata_);
  swap(dpi_, other->dpi_);
  swap(imagetype_, other->imagetype_);
  swap(imageformat_, other->imageformat_);
  swap(extracttext_, other->extracttext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RenderRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RenderResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenderResponse::kPageIndexFieldNumber;
const int RenderResponse::kPageTextFieldNumber;
const int RenderResponse::kImageDataFieldNumber;
const int RenderResponse::kImageHeightFieldNumber;
const int RenderResponse::kImageWidthFieldNumber;
const int RenderResponse::kImageDPIFieldNumber;
const int RenderResponse::kImageFormatFieldNumber;
const int RenderResponse::kImageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenderResponse::RenderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_service_2eproto::InitDefaultsRenderResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:visma.pdfutil.RenderResponse)
}
RenderResponse::RenderResponse(const RenderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pagetext().size() > 0) {
    pagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetext_);
  }
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imagedata().size() > 0) {
    imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  ::memcpy(&pageindex_, &from.pageindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&imagesize_) -
    reinterpret_cast<char*>(&pageindex_)) + sizeof(imagesize_));
  // @@protoc_insertion_point(copy_constructor:visma.pdfutil.RenderResponse)
}

void RenderResponse::SharedCtor() {
  pagetext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pageindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagesize_) -
      reinterpret_cast<char*>(&pageindex_)) + sizeof(imagesize_));
  _cached_size_ = 0;
}

RenderResponse::~RenderResponse() {
  // @@protoc_insertion_point(destructor:visma.pdfutil.RenderResponse)
  SharedDtor();
}

void RenderResponse::SharedDtor() {
  pagetext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenderResponse::descriptor() {
  ::protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RenderResponse& RenderResponse::default_instance() {
  ::protobuf_service_2eproto::InitDefaultsRenderResponse();
  return *internal_default_instance();
}

RenderResponse* RenderResponse::New(::google::protobuf::Arena* arena) const {
  RenderResponse* n = new RenderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:visma.pdfutil.RenderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pagetext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pageindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagesize_) -
      reinterpret_cast<char*>(&pageindex_)) + sizeof(imagesize_));
  _internal_metadata_.Clear();
}

bool RenderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:visma.pdfutil.RenderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pageIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pageindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pageText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pagetext().data(), static_cast<int>(this->pagetext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "visma.pdfutil.RenderResponse.pageText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes imageData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 imageHeight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 imageWidth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 imageDPI = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagedpi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .visma.pdfutil.ImageFormat imageFormat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_imageformat(static_cast< ::visma::pdfutil::ImageFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 imageSize = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:visma.pdfutil.RenderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:visma.pdfutil.RenderResponse)
  return false;
#undef DO_
}

void RenderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:visma.pdfutil.RenderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pageIndex = 1;
  if (this->pageindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pageindex(), output);
  }

  // string pageText = 2;
  if (this->pagetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pagetext().data(), static_cast<int>(this->pagetext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "visma.pdfutil.RenderResponse.pageText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pagetext(), output);
  }

  // bytes imageData = 3;
  if (this->imagedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->imagedata(), output);
  }

  // int32 imageHeight = 4;
  if (this->imageheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imageheight(), output);
  }

  // int32 imageWidth = 5;
  if (this->imagewidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->imagewidth(), output);
  }

  // int32 imageDPI = 6;
  if (this->imagedpi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->imagedpi(), output);
  }

  // .visma.pdfutil.ImageFormat imageFormat = 7;
  if (this->imageformat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->imageformat(), output);
  }

  // int32 imageSize = 8;
  if (this->imagesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->imagesize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:visma.pdfutil.RenderResponse)
}

::google::protobuf::uint8* RenderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:visma.pdfutil.RenderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pageIndex = 1;
  if (this->pageindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pageindex(), target);
  }

  // string pageText = 2;
  if (this->pagetext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pagetext().data(), static_cast<int>(this->pagetext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "visma.pdfutil.RenderResponse.pageText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pagetext(), target);
  }

  // bytes imageData = 3;
  if (this->imagedata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->imagedata(), target);
  }

  // int32 imageHeight = 4;
  if (this->imageheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imageheight(), target);
  }

  // int32 imageWidth = 5;
  if (this->imagewidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->imagewidth(), target);
  }

  // int32 imageDPI = 6;
  if (this->imagedpi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->imagedpi(), target);
  }

  // .visma.pdfutil.ImageFormat imageFormat = 7;
  if (this->imageformat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->imageformat(), target);
  }

  // int32 imageSize = 8;
  if (this->imagesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->imagesize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:visma.pdfutil.RenderResponse)
  return target;
}

size_t RenderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:visma.pdfutil.RenderResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pageText = 2;
  if (this->pagetext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pagetext());
  }

  // bytes imageData = 3;
  if (this->imagedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());
  }

  // int32 pageIndex = 1;
  if (this->pageindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pageindex());
  }

  // int32 imageHeight = 4;
  if (this->imageheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imageheight());
  }

  // int32 imageWidth = 5;
  if (this->imagewidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imagewidth());
  }

  // int32 imageDPI = 6;
  if (this->imagedpi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imagedpi());
  }

  // .visma.pdfutil.ImageFormat imageFormat = 7;
  if (this->imageformat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->imageformat());
  }

  // int32 imageSize = 8;
  if (this->imagesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imagesize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:visma.pdfutil.RenderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RenderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:visma.pdfutil.RenderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:visma.pdfutil.RenderResponse)
    MergeFrom(*source);
  }
}

void RenderResponse::MergeFrom(const RenderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:visma.pdfutil.RenderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pagetext().size() > 0) {

    pagetext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pagetext_);
  }
  if (from.imagedata().size() > 0) {

    imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
  }
  if (from.pageindex() != 0) {
    set_pageindex(from.pageindex());
  }
  if (from.imageheight() != 0) {
    set_imageheight(from.imageheight());
  }
  if (from.imagewidth() != 0) {
    set_imagewidth(from.imagewidth());
  }
  if (from.imagedpi() != 0) {
    set_imagedpi(from.imagedpi());
  }
  if (from.imageformat() != 0) {
    set_imageformat(from.imageformat());
  }
  if (from.imagesize() != 0) {
    set_imagesize(from.imagesize());
  }
}

void RenderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:visma.pdfutil.RenderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderResponse::CopyFrom(const RenderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:visma.pdfutil.RenderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderResponse::IsInitialized() const {
  return true;
}

void RenderResponse::Swap(RenderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenderResponse::InternalSwap(RenderResponse* other) {
  using std::swap;
  pagetext_.Swap(&other->pagetext_);
  imagedata_.Swap(&other->imagedata_);
  swap(pageindex_, other->pageindex_);
  swap(imageheight_, other->imageheight_);
  swap(imagewidth_, other->imagewidth_);
  swap(imagedpi_, other->imagedpi_);
  swap(imageformat_, other->imageformat_);
  swap(imagesize_, other->imagesize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RenderResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pdfutil
}  // namespace visma

// @@protoc_insertion_point(global_scope)
